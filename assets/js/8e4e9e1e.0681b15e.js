"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[8830],{17011:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=r(85893),s=r(11151);const i={title:"gRPCurl",sidebar_position:1},o=void 0,c={id:"grpc/interact-grpc-curl",title:"gRPCurl",description:"Interacting with grpcurl",source:"@site/docs/apis/grpc/interact-grpc-curl.mdx",sourceDirName:"grpc",slug:"/grpc/interact-grpc-curl",permalink:"/apis/grpc/interact-grpc-curl",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"gRPCurl",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Buf Studio",permalink:"/apis/grpc/interact-grpc-buf-studio"},next:{title:"gRPC Go",permalink:"/apis/grpc/interact-grpc-go"}},a={},l=[{value:"Interacting with grpcurl",id:"interacting-with-grpcurl",level:3},{value:"Query for historical state using grpcurl",id:"query-for-historical-state-using-grpcurl",level:4}];function u(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"interacting-with-grpcurl",children:"Interacting with grpcurl"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/fullstorydev/grpcurl",children:"grpcurl"})," is like ",(0,t.jsx)(n.code,{children:"curl"})," but for gRPC. It is also available as a Go library, but we will use it only as a CLI command for debugging and testing purposes. Follow the instructions in the previous link to install it."]}),"\n",(0,t.jsxs)(n.p,{children:["Assuming you already installed sentinelhub, you should be able to run the following command to list the Protobuf services available (you can replace ",(0,t.jsx)(n.code,{children:"grpc.sentinel.co:9090"})," by the gRPC server endpoint of another node such as another provider or your own node)."]}),"\n",(0,t.jsx)(n.p,{children:"Listing all the methods from the mainnet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"grpcurl -plaintext grpc.sentinel.co:9090 list\n"})}),"\n",(0,t.jsx)(n.p,{children:"Output will look like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cosmos.auth.v1beta1.Query\ncosmos.authz.v1beta1.Query\ncosmos.bank.v1beta1.Query\ncosmos.base.reflection.v1beta1.ReflectionService\ncosmos.base.reflection.v2alpha1.ReflectionService\ncosmos.base.tendermint.v1beta1.Service\ncosmos.distribution.v1beta1.Query\ncosmos.evidence.v1beta1.Query\ncosmos.feegrant.v1beta1.Query\ncosmos.gov.v1beta1.Query\ncosmos.mint.v1beta1.Query\ncosmos.params.v1beta1.Query\ncosmos.slashing.v1beta1.Query\ncosmos.staking.v1beta1.Query\ncosmos.tx.v1beta1.Service\ncosmos.upgrade.v1beta1.Query\ncosmwasm.wasm.v1.Query\ngrpc.reflection.v1alpha.ServerReflection\nibc.applications.fee.v1.Query\nibc.applications.interchain_accounts.controller.v1.Query\nibc.applications.interchain_accounts.host.v1.Query\nibc.applications.transfer.v1.Query\nibc.core.channel.v1.Query\nibc.core.client.v1.Query\nibc.core.connection.v1.Query\nsentinel.deposit.v1.QueryService\nsentinel.node.v2.QueryService\nsentinel.plan.v2.QueryService\nsentinel.provider.v2.QueryService\nsentinel.session.v2.QueryService\nsentinel.subscription.v2.QueryService\nsentinel.swap.v1.QueryService\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should see a list of gRPC services, such as ",(0,t.jsx)(n.code,{children:"cosmos.bank.v1beta1.Query"}),". This is called reflection, which is a Protobuf endpoint returning a description of all available endpoints. Each of these represents a different Protobuf service, and each service exposes multiple RPC methods you can query against."]}),"\n",(0,t.jsx)(n.p,{children:"In order to get a description of the service you can run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"grpcurl  -plaintext \\\n    grpc.sentinel.co:9090 \\\n    describe sentinel.node.v2.QueryService               \n"})}),"\n",(0,t.jsx)(n.p,{children:"The list of all available gRPC query endpoints and API exploration is possible with the help of buf studio."}),"\n",(0,t.jsx)(n.h4,{id:"query-for-historical-state-using-grpcurl",children:"Query for historical state using grpcurl"}),"\n",(0,t.jsxs)(n.p,{children:["You may also query for historical data by passing some ",(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md",children:"gRPC metadata"})," to the query: the ",(0,t.jsx)(n.code,{children:"x-cosmos-block-height"})," metadata should contain the block to query. Using grpcurl as above, the command looks like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'grpcurl \\\n    -plaintext \\\n    -H "x-sentinel-block-height: 13000000" \\\n    -d \'{"address":"sent1uddk4mfqq3uyu2yzhym8spheqatqs30fzh5tmr"}\' \\\n    grpc.sentinel.co:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n'})}),"\n",(0,t.jsx)(n.p,{children:"Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response."})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);