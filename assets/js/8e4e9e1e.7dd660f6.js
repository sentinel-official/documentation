"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[8830],{31547:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const a={title:"gRPCurl",sidebar_position:1},s=void 0,o={unversionedId:"grpc/interact-grpc-curl",id:"grpc/interact-grpc-curl",title:"gRPCurl",description:"Interacting with grpcurl",source:"@site/docs/apis/grpc/interact-grpc-curl.mdx",sourceDirName:"grpc",slug:"/grpc/interact-grpc-curl",permalink:"/apis/grpc/interact-grpc-curl",draft:!1,editUrl:"https://github.com/sentinel-official/docs/tree/main/docs/apis/grpc/interact-grpc-curl.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"gRPCurl",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Buf Studio",permalink:"/apis/grpc/interact-grpc-buf-studio"},next:{title:"gRPC Go",permalink:"/apis/grpc/interact-grpc-go"}},c={},l=[{value:"Interacting with grpcurl",id:"interacting-with-grpcurl",level:3},{value:"Query for historical state using grpcurl",id:"query-for-historical-state-using-grpcurl",level:4}],u={toc:l},p="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"interacting-with-grpcurl"},"Interacting with grpcurl"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fullstorydev/grpcurl"},"grpcurl")," is like ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," but for gRPC. It is also available as a Go library, but we will use it only as a CLI command for debugging and testing purposes. Follow the instructions in the previous link to install it."),(0,i.kt)("p",null,"Assuming you already installed sentinelhub, you should be able to run the following command to list the Protobuf services available (you can replace ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc.sentinel.co:9090")," by the gRPC server endpoint of another node such as another provider or your own node)."),(0,i.kt)("p",null,"Listing all the methods from the mainnet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext grpc.sentinel.co:9090 list\n")),(0,i.kt)("p",null,"Output will look like: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cosmos.auth.v1beta1.Query\ncosmos.authz.v1beta1.Query\ncosmos.bank.v1beta1.Query\ncosmos.base.reflection.v1beta1.ReflectionService\ncosmos.base.reflection.v2alpha1.ReflectionService\ncosmos.base.tendermint.v1beta1.Service\ncosmos.distribution.v1beta1.Query\ncosmos.evidence.v1beta1.Query\ncosmos.feegrant.v1beta1.Query\ncosmos.gov.v1beta1.Query\ncosmos.mint.v1beta1.Query\ncosmos.params.v1beta1.Query\ncosmos.slashing.v1beta1.Query\ncosmos.staking.v1beta1.Query\ncosmos.tx.v1beta1.Service\ncosmos.upgrade.v1beta1.Query\ncosmwasm.wasm.v1.Query\ngrpc.reflection.v1alpha.ServerReflection\nibc.applications.fee.v1.Query\nibc.applications.interchain_accounts.controller.v1.Query\nibc.applications.interchain_accounts.host.v1.Query\nibc.applications.transfer.v1.Query\nibc.core.channel.v1.Query\nibc.core.client.v1.Query\nibc.core.connection.v1.Query\nsentinel.deposit.v1.QueryService\nsentinel.node.v2.QueryService\nsentinel.plan.v2.QueryService\nsentinel.provider.v2.QueryService\nsentinel.session.v2.QueryService\nsentinel.subscription.v2.QueryService\nsentinel.swap.v1.QueryService\n")),(0,i.kt)("p",null,"You should see a list of gRPC services, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"cosmos.bank.v1beta1.Query"),". This is called reflection, which is a Protobuf endpoint returning a description of all available endpoints. Each of these represents a different Protobuf service, and each service exposes multiple RPC methods you can query against."),(0,i.kt)("p",null,"In order to get a description of the service you can run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl  -plaintext \\\n    grpc.sentinel.co:9090 \\\n    describe sentinel.node.v2.QueryService               \n")),(0,i.kt)("p",null,"The list of all available gRPC query endpoints and API exploration is possible with the help of buf studio. "),(0,i.kt)("h4",{id:"query-for-historical-state-using-grpcurl"},"Query for historical state using grpcurl"),(0,i.kt)("p",null,"You may also query for historical data by passing some ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md"},"gRPC metadata")," to the query: the ",(0,i.kt)("inlineCode",{parentName:"p"},"x-cosmos-block-height")," metadata should contain the block to query. Using grpcurl as above, the command looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'grpcurl \\\n    -plaintext \\\n    -H "x-cosmos-block-height: 13000000" \\\n    -d \'{"address":"sent1uddk4mfqq3uyu2yzhym8spheqatqs30fzh5tmr"}\' \\\n    grpc.sentinel.co:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n')),(0,i.kt)("p",null,"Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response."))}g.isMDXComponent=!0}}]);