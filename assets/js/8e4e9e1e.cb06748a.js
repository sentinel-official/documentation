"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[8830],{31547:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var s=o(87462),r=(o(67294),o(3905));const n={title:"gRPCurl",sidebar_position:1},a=void 0,i={unversionedId:"grpc/interact-grpc-curl",id:"grpc/interact-grpc-curl",title:"gRPCurl",description:"Interacting with grpcurl",source:"@site/docs/apis/grpc/interact-grpc-curl.mdx",sourceDirName:"grpc",slug:"/grpc/interact-grpc-curl",permalink:"/apis/grpc/interact-grpc-curl",draft:!1,editUrl:"https://github.com/sentinel-official/docs/tree/main/docs/apis/grpc/interact-grpc-curl.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"gRPCurl",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Buf Studio",permalink:"/apis/grpc/interact-grpc-buf-studio"},next:{title:"gRPC Go",permalink:"/apis/grpc/interact-grpc-go"}},l={},c=[{value:"Interacting with grpcurl",id:"interacting-with-grpcurl",level:3},{value:"Query for historical state using grpcurl",id:"query-for-historical-state-using-grpcurl",level:4}],u={toc:c},p="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,s.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"interacting-with-grpcurl"},"Interacting with grpcurl"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fullstorydev/grpcurl"},"grpcurl")," is like ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," but for gRPC. It is also available as a Go library, but we will use it only as a CLI command for debugging and testing purposes. Follow the instructions in the previous link to install it."),(0,r.kt)("p",null,"Assuming you already installed osmosisd with the ",(0,r.kt)("a",{parentName:"p",href:"../osmosis-core/osmosisd"},"installer"),", you should be able to run the following command to list the Protobuf services available (you can replace ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc.osmosis.zone:9000")," by the gRPC server endpoint of another node such as the testnet, another provider or your own node."),(0,r.kt)("p",null,"Listing all the methods from the mainnet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext grpc.osmosis.zone:9090 list\n")),(0,r.kt)("p",null,"Output will look like: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cosmos.auth.v1beta1.Query\ncosmos.authz.v1beta1.Query\ncosmos.bank.v1beta1.Query\ncosmos.base.reflection.v1beta1.ReflectionService\ncosmos.base.reflection.v2alpha1.ReflectionService\ncosmos.base.tendermint.v1beta1.Service\ncosmos.distribution.v1beta1.Query\ncosmos.evidence.v1beta1.Query\ncosmos.gov.v1beta1.Query\ncosmos.params.v1beta1.Query\ncosmos.slashing.v1beta1.Query\ncosmos.staking.v1beta1.Query\ncosmos.tx.v1beta1.Service\ncosmos.upgrade.v1beta1.Query\ncosmwasm.wasm.v1.Query\ngrpc.reflection.v1alpha.ServerReflection\nibc.applications.interchain_accounts.host.v1.Query\nibc.applications.transfer.v1.Query\nibc.core.channel.v1.Query\nibc.core.client.v1.Query\nibc.core.connection.v1.Query\nosmosis.epochs.v1beta1.Query\nosmosis.gamm.v1beta1.Query\nosmosis.incentives.Query\nosmosis.lockup.Query\nosmosis.mint.v1beta1.Query\nosmosis.poolincentives.v1beta1.Query\nosmosis.superfluid.Query\nosmosis.tokenfactory.v1beta1.Query\nosmosis.twap.v1beta1.Query\nosmosis.txfees.v1beta1.Query\ntestdata.Query\n")),(0,r.kt)("p",null,"You should see a list of gRPC services, like ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmos.bank.v1beta1.Query"),". This is called reflection, which is a Protobuf endpoint returning a description of all available endpoints. Each of these represents a different Protobuf service, and each service exposes multiple RPC methods you can query against."),(0,r.kt)("p",null,"In order to get a description of the service you can run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl  -plaintext \\\n    grpc.osmosis.zone:9090 \\\n    describe osmosis.gamm.v1beta1.Query               \n")),(0,r.kt)("p",null,"It's also possible to execute an RPC call to query the node for information:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"grpcurl -plaintext grpc.dev-osmosis.zone:443 osmosis.gamm.v1beta1.Query.Pools\n")),(0,r.kt)("p",null,"The list of all available gRPC query endpoints and API exploration is possible with the help of buf studio. "),(0,r.kt)("h4",{id:"query-for-historical-state-using-grpcurl"},"Query for historical state using grpcurl"),(0,r.kt)("p",null,"You may also query for historical data by passing some ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md"},"gRPC metadata")," to the query: the ",(0,r.kt)("inlineCode",{parentName:"p"},"x-cosmos-block-height")," metadata should contain the block to query. Using grpcurl as above, the command looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'grpcurl \\\n    -plaintext \\\n    -H "x-cosmos-block-height: 6312618" \\\n    -d \'{"address":"osmo19a7pmytd9vk26l57q8chacuprsmx05g23mg6yc"}\' \\\n    grpc.osmosis.zone:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n')),(0,r.kt)("p",null,"Note: This endpoint might change to  grpc.osmosis.zone:443 in the near future. "),(0,r.kt)("p",null,"Assuming the state at that block has not yet been pruned by the node, this query should return a non-empty response."))}m.isMDXComponent=!0}}]);