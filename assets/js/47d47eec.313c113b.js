"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[3434],{10138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>g});var r=t(87462),o=(t(67294),t(3905));const s={title:"gRPC Go",sidebar_position:3},a=void 0,i={unversionedId:"grpc/interact-grpc-go",id:"grpc/interact-grpc-go",title:"gRPC Go",description:"Interacting with Go",source:"@site/docs/apis/grpc/interact-grpc-go.mdx",sourceDirName:"grpc",slug:"/grpc/interact-grpc-go",permalink:"/apis/grpc/interact-grpc-go",draft:!1,editUrl:"https://github.com/sentinel-official/docs/tree/main/docs/apis/grpc/interact-grpc-go.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"gRPC Go",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"gRPCurl",permalink:"/apis/grpc/interact-grpc-curl"},next:{title:"RPC Gateway",permalink:"/apis/rpc/"}},c={},g=[{value:"Interacting with Go",id:"interacting-with-go",level:3},{value:"Install Cosmos SDK",id:"install-cosmos-sdk",level:4},{value:"Query for historical state using Go",id:"query-for-historical-state-using-go",level:4}],l={toc:g},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"interacting-with-go"},"Interacting with Go"),(0,o.kt)("p",null,"The following snippet shows how to query the state using gRPC inside a Go program. The idea is to create a gRPC connection, and use the Protobuf-generated client code to query the gRPC server."),(0,o.kt)("h4",{id:"install-cosmos-sdk"},"Install Cosmos SDK"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/cosmos/cosmos-sdk@main\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "fmt"\n\n    "google.golang.org/grpc"\n\n    "github.com/cosmos/cosmos-sdk/codec"\n    sdk "github.com/cosmos/cosmos-sdk/types"\n    banktypes "github.com/cosmos/cosmos-sdk/x/bank/types"\n)\n\nfunc queryState() error {\n    myAddress, err := sdk.AccAddressFromBech32("cosmos1...")\n    if err != nil {\n        return err\n    }\n\n    // Create a connection to the gRPC server.\n    grpcConn, err := grpc.Dial(\n        "127.0.0.1:9090", // your gRPC server address.\n        grpc.WithInsecure(), // The Cosmos SDK doesn\'t support any transport security mechanism. \n        // This instantiates a general gRPC codec which handles proto bytes. We pass in a nil interface registry\n        // if the request/response types contain interface instead of \'nil\' you should pass the application specific codec.\n        grpc.WithDefaultCallOptions(grpc.ForceCodec(codec.NewProtoCodec(nil).GRPCCodec())),\n    )\n    if err != nil {\n        return err\n    }\n    defer grpcConn.Close()\n\n    // This creates a gRPC client to query the x/bank service.\n    bankClient := banktypes.NewQueryClient(grpcConn)\n    bankRes, err := bankClient.Balance(\n        context.Background(),\n        &banktypes.QueryBalanceRequest{Address: myAddress.String(), Denom: "atom"},\n    )\n    if err != nil {\n        return err\n    }\n\n    fmt.Println(bankRes.GetBalance()) // Prints the account balance\n\n    return nil\n}\n')),(0,o.kt)("p",null,"You can replace the query client (here we are using ",(0,o.kt)("inlineCode",{parentName:"p"},"x/bank"),"'s) with one generated from any other Protobuf service. The list of all available gRPC query endpoints is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/issues/7786"},"coming soon"),"."),(0,o.kt)("h4",{id:"query-for-historical-state-using-go"},"Query for historical state using Go"),(0,o.kt)("p",null,"Querying for historical blocks is done by adding the block height metadata in the gRPC request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "fmt"\n\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/metadata"\n\n    "github.com/cosmos/cosmos-sdk/codec"\n    sdk "github.com/cosmos/cosmos-sdk/types"\n    grpctypes "github.com/cosmos/cosmos-sdk/types/grpc"\n    banktypes "github.com/cosmos/cosmos-sdk/x/bank/types"\n)\n\nfunc queryState() error {\n    // --snip--\n\n    var header metadata.MD\n    bankRes, err = bankClient.Balance(\n        metadata.AppendToOutgoingContext(context.Background(), grpctypes.GRPCBlockHeightHeader, "12"), // Add metadata to request\n        &banktypes.QueryBalanceRequest{Address: myAddress.String(), Denom: "atom"},\n        grpc.Header(&header), // Retrieve header from response\n    )\n    if err != nil {\n        return err\n    }\n    blockHeight := header.Get(grpctypes.GRPCBlockHeightHeader)\n\n    fmt.Println(blockHeight) // Prints the block height (12)\n\n    return nil\n}\n')))}d.isMDXComponent=!0}}]);